/*
 * This file is responsible for the UI of the game.
 * Created on: 17-10-2020
 * Last Modified on: 01-11-2020
 * Author: Shah Axat(19IT126)
 */

package Wordoku;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.*;
import javax.swing.*;

public class WordokuUI extends javax.swing.JFrame {
    private JButton[][] buttons;
    private ActionListener[][] actionListener;
    private JPanel[][] blocks;
    private Wordoku wordoku;
    private int gameMode;
    private int grid;
    private boolean paused;
    private final StopWatch stopWatch;

    //Creates a new UI form
    public WordokuUI() {
        wordoku = new Wordoku();
        gameMode = Wordoku.GAME_MODE_MEDIUM;
        grid = Wordoku.GRID_9X9;
        stopWatch = new StopWatch();
        paused = false;
        initComponents();
        initialize();
        startTimer();
    }

    /*
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        //List of Components
        base = new javax.swing.JPanel();
        options = new javax.swing.JPanel();
        newGameBut = new javax.swing.JButton();
        resetGameBut = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        timeLabel = new javax.swing.JLabel();
        resume = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        holder = new javax.swing.JPanel();
        board = new javax.swing.JPanel();
        menu = new javax.swing.JMenuBar();
        game = new javax.swing.JMenu();
        newGame = new javax.swing.JMenuItem();
        newGame6X6 = new javax.swing.JMenuItem();
        resetGame = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        beginner = new javax.swing.JRadioButtonMenuItem();
        intermediate = new javax.swing.JRadioButtonMenuItem();
        expert = new javax.swing.JRadioButtonMenuItem();
        help = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();
        rules = new javax.swing.JMenuItem();
        ButtonGroup difficultyLevelGroup = new ButtonGroup();

        //Frame Settings
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Wordoku");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(500, 500));

        base.setBackground(new java.awt.Color(204, 204, 204));
        base.setAlignmentX(0.0F);
        base.setAlignmentY(0.0F);

        options.setBackground(new java.awt.Color(255, 255, 255));

        //New Game Button Settings
        newGameBut.setBackground(new java.awt.Color(255, 255, 255));
        newGameBut.setFont(new java.awt.Font("Quicksand", 0, 12));
        newGameBut.setText("New Puzzle");
        newGameBut.setMargin(new java.awt.Insets(0, 0, 0, 0));
        newGameBut.setMaximumSize(new java.awt.Dimension(63, 19));
        newGameBut.setMinimumSize(new java.awt.Dimension(63, 19));
        newGameBut.setPreferredSize(new java.awt.Dimension(63, 19));
        newGameBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButActionPerformed(evt);
            }
        });

        //Reset Game Button Settings
        resetGameBut.setBackground(new java.awt.Color(255, 255, 255));
        resetGameBut.setFont(new java.awt.Font("Quicksand", 0, 12));
        resetGameBut.setText("Reset Puzzle");
        resetGameBut.setMargin(new java.awt.Insets(0, 0, 0, 0));
        resetGameBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetGameButActionPerformed(evt);
            }
        });

        //Pause Button Settings
        pause.setBackground(new java.awt.Color(255, 255, 255));
        pause.setFont(new java.awt.Font("Quicksand", 0, 12));
        pause.setText("Pause");
        pause.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        //Timer label Settings
        timeLabel.setFont(new java.awt.Font("Quicksand", 0, 24));
        timeLabel.setForeground(new java.awt.Color(51, 51, 51));
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timeLabel.setText("00:00:000");
        timeLabel.setIconTextGap(0);

        //Resume Button Settings
        resume.setBackground(new java.awt.Color(255, 255, 255));
        resume.setFont(new java.awt.Font("Quicksand", 0, 12));
        resume.setText("Resume");
        resume.setMargin(new java.awt.Insets(0, 0, 0, 0));
        resume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeActionPerformed(evt);
            }
        });

        //Submit Button Settings
        submit.setBackground(new java.awt.Color(255, 255, 255));
        submit.setFont(new java.awt.Font("Quicksand", 0, 12));
        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        //Adding all the buttons and orienting them in the options panel
        javax.swing.GroupLayout optionsLayout = new javax.swing.GroupLayout(options);
        options.setLayout(optionsLayout);
        optionsLayout.setHorizontalGroup(
                optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(optionsLayout.createSequentialGroup()
                                .addComponent(newGameBut, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetGameBut, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pause, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resume, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(timeLabel)
                                .addContainerGap())
        );
        optionsLayout.setVerticalGroup(
                optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(newGameBut, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                .addComponent(resetGameBut, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                .addComponent(pause, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                .addComponent(resume, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(timeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, Short.MAX_VALUE)
        );

        //holder panel settings
        holder.setBackground(new java.awt.Color(255, 255, 255));
        holder.setAlignmentX(0.0F);
        holder.setAlignmentY(0.0F);
        holder.setLayout(new java.awt.GridLayout(1, 1));

        //board panel settings
        board.setBackground(new java.awt.Color(255, 255, 255));
        board.setAlignmentX(0.0F);
        board.setAlignmentY(0.0F);
        board.setMinimumSize(new java.awt.Dimension(100, 100));
        board.setPreferredSize(new java.awt.Dimension(100, 100));
        board.setLayout(new java.awt.GridLayout(9, 9));
        holder.add(board);

        //adding the base components
        javax.swing.GroupLayout baseLayout = new javax.swing.GroupLayout(base);
        base.setLayout(baseLayout);
        baseLayout.setHorizontalGroup(
                baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, baseLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(holder, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                                        .addComponent(options, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        baseLayout.setVerticalGroup(
                baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(baseLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(holder, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                                .addContainerGap())
        );

        //Mode menu
        game.setText("Select Mode");

        //9x9 in the menu
        newGame.setText("Classic");
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameActionPerformed(evt);
            }
        });
        game.add(newGame);

        //6x6 in the menu
        newGame6X6.setText("Mini");
        newGame6X6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGame6X6ActionPerformed(evt);
            }
        });
        game.add(newGame6X6);

        /*resetGame.setText("Reset Game");
        resetGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetGameActionPerformed(evt);
            }
        });
        game.add(resetGame);*/
        //Adding a line
        game.add(jSeparator1);

        //Exit Option
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        game.add(exit);

        menu.add(game);

        //Difficulty Menu
        jMenu2.setText("Select Difficulty");

        //Beginner
        beginner.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        beginner.setText("Beginner");
        beginner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginnerActionPerformed(evt);
            }
        });
        jMenu2.add(beginner);

        //Intermediate
        intermediate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        intermediate.setSelected(true);
        intermediate.setText("Intermediate");
        intermediate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intermediateActionPerformed(evt);
            }
        });
        jMenu2.add(intermediate);

        //Expert
        expert.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        expert.setText("Expert");
        expert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expertActionPerformed(evt);
            }
        });
        jMenu2.add(expert);

        difficultyLevelGroup.add(beginner);
        difficultyLevelGroup.add(intermediate);
        difficultyLevelGroup.add(expert);

        menu.add(jMenu2);

        //Help Menu
        help.setText("Help");

        //Rules
        rules.setText("Rules");
        rules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesActionPerformed(evt);
            }
        });
        help.add(rules);

        //About
        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        help.add(about);

        menu.add(help);

        setJMenuBar(menu);

        //Adding the menus and orienting them
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(base, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(base, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    //Adding action to the new puzzle button
    private void newGameActionPerformed(java.awt.event.ActionEvent evt) {
        grid = Wordoku.GRID_9X9;
        char[][] puzzle = wordoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }

   /* private void resetGameActionPerformed(java.awt.event.ActionEvent evt) {
        char[][] puzzle = wordoku.resetPuzzle();
        createBoard(puzzle);
    }*/

    //Adding action to the intermediate button
    private void intermediateActionPerformed(java.awt.event.ActionEvent evt) {
        gameMode = Wordoku.GAME_MODE_MEDIUM;
        char[][] puzzle = wordoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }

    //Adding action to the expert button
    private void expertActionPerformed(java.awt.event.ActionEvent evt) {
        gameMode = Wordoku.GAME_MODE_EXPERT;
        char[][] puzzle = wordoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }

    //Adding action to the exit button
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    //Adding action to the beginner button
    private void beginnerActionPerformed(java.awt.event.ActionEvent evt) {
        gameMode = Wordoku.GAME_MODE_EASY;
        char[][] puzzle = wordoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }

    //Adding action to mini mode button
    private void newGame6X6ActionPerformed(java.awt.event.ActionEvent evt) {
        grid = Wordoku.GRID_6X6;
        char[][] puzzle = wordoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }

    //Adding action to the pause button
    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {
        stopWatch.pause();
        paused = true;
        showMessage("PAUSED");
    }

    //Adding action to the resume button
    private void resumeActionPerformed(java.awt.event.ActionEvent evt) {
        stopWatch.resume();
        paused = false;
        holder.removeAll();
        holder.add(board);
        holder.repaint();
        this.setVisible(true);
        this.startTimer();
    }

    //Adding action to the reset button
    private void resetGameButActionPerformed(java.awt.event.ActionEvent evt) {
        char[][] puzzle = wordoku.resetPuzzle();
        createBoard(puzzle);
    }

    //Adding action to the new game button
    private void newGameButActionPerformed(java.awt.event.ActionEvent evt) {
        char[][] puzzle = wordoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }

    //Adding  action to the submit button
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {
        if (!isAnsComplete()) {
            JOptionPane.showMessageDialog(this, "FILL ALL THE EMPTY SPACES FIRST!");
        } else {
            stopWatch.pause();
            boolean isAnsCorrect = wordoku.check(getAns());
            String messageStr = "";
            if (isAnsCorrect) {
                messageStr = "CONGRATULATIONS!! YOU SOLVED THE PUZZLE IN " + timeLabel.getText();
            } else {
                messageStr = "OOPS!! SEEMS SOMETHING IS WRONG IN YOUR SOLUTION!";
            }
            showMessage(messageStr);
        }
    }

    //Adding action to the About button
    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {
        JOptionPane.showMessageDialog(this, ">Patva Viraj (19IT117)\n  Backend Java Developer\n\n>Shah Axat (19IT126)\n  UI/UX Designer","About",JOptionPane.INFORMATION_MESSAGE);
    }

    //Adding action to the rules button
    private void rulesActionPerformed(java.awt.event.ActionEvent evt) {
        JOptionPane.showMessageDialog(this, ">The Classic Wordoku game involves a grid of 81 squares.\n>The Grid is Divided into Nine Blocks, each containing nine squares.\n>Each of the Nine blocks has to contain all the alloted Alphabets within its Squares.\n>Each Alphabet can only Appear once in a Row, Column or Box.\n\n","Rules",JOptionPane.INFORMATION_MESSAGE);
    }

    //This function will create a new board to play
    private void createBoard(char[][] puzzle) {
        board.removeAll();
        grid = puzzle.length;
        blocks = new JPanel[grid][grid];
        buttons = new JButton[grid][grid];
        actionListener = new ActionListener[grid][grid];
        board.setLayout(new GridLayout(grid, grid, 3, 3));

        int rowsInGrid = grid == 9 ? 3 : 2;//Choosing rows based on mode. Columns will always be equal to 3 in one box

        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                blocks[i][j] = new JPanel();
                buttons[i][j] = new JButton();
                String text = "";
                if (puzzle[i][j] != ' ') {
                    text += puzzle[i][j];
                } else {
                    final JButton tempbutton = buttons[i][j];
                    final JPanel tempBlock = blocks[i][j];
                    actionListener[i][j] = new ActionListener() {

                        public void actionPerformed(ActionEvent e) {
                            viewInputs(tempBlock, tempbutton, grid);
                        }
                    };
                    buttons[i][j].addActionListener(actionListener[i][j]);
                }
                buttons[i][j].setText(text);
                buttons[i][j].setFont(new java.awt.Font("Quicksand", 0, 24));

                if (((0 <= i && i < rowsInGrid) || (rowsInGrid * 2 <= i && i < grid)) && (3 <= j && j < 6)) {
                    buttons[i][j].setBackground(new java.awt.Color(204, 204, 204));
                } else if ((rowsInGrid <= i && i < rowsInGrid * 2) && ((0 <= j && j < 3) || (6 <= j && j < 9))) {
                    buttons[i][j].setBackground(new java.awt.Color(204, 204, 204));
                } else {
                    buttons[i][j].setBackground(new java.awt.Color(255, 255, 255));
                }
                blocks[i][j].setLayout(new GridLayout(1, 1));
                blocks[i][j].add(buttons[i][j]);
                board.add(blocks[i][j]);


            }
        }

        holder.removeAll();
        holder.add(board);
        board.repaint();
        holder.repaint();
        this.setVisible(true);
        stopWatch.start();
    }

    //This function will start creating a puzzle by calling the createBoard method
    private void initialize() {
        char[][] puzzle = wordoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }

    //To set visibility to see user inputs
    private void viewInputs(JPanel block, JButton inputButtton, int numOfInput) {
        JPanel inputs = new InputUI(this, block, inputButtton, numOfInput);
        block.remove(inputButtton);
        block.add(inputs);
        this.setVisible(true);
    }

    //Setting the user input at that particular position
    public void setInput(String ans, JPanel block, JButton inputButtton) {
        block.removeAll();
        inputButtton.setText(ans);
        inputButtton.setFont(new java.awt.Font("Quicksand Bold", 1, 24));
        block.add(inputButtton);
        this.repaint();
    }

    //Method to get user solution when he clicks submit
    private char[][] getAns() {
        char ans[][] = new char[grid][grid];

        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                ans[i][j] = buttons[i][j].getText().charAt(0);
            }
        }

        return ans;
    }

    //Method to check there are no empty spaces in user solution
    private boolean isAnsComplete() {
        boolean isAnsComplete = true;
        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                if (' ' == buttons[i][j].getText().charAt(0)) {
                    return false;
                }
            }
        }
        return true;
    }

    //Method to show pop-up messages whenever needed
    private void showMessage(String message) {
        JLabel messageLabel = new JLabel();
        messageLabel.setFont(new java.awt.Font("Quicksand", 1, 20));
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText(message);
        holder.removeAll();
        holder.add(messageLabel);
        holder.repaint();
        this.setVisible(true);
    }

    //Method to start timer by creating threads
    private void startTimer() {
        Thread thread = new Thread(new Runnable() {

            public void run() {
                //stopWatch.start();
                while (true) {
                    if (!paused) {
                        final String timeString = new SimpleDateFormat("mm:ss:SSS").format(stopWatch.getElapsedTime());
                        timeLabel.setText("" + timeString);
                    }
                }
            }
        });
        thread.start();
    }

    // Variable declaration- Never Modify this
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem rules;
    private javax.swing.JPanel base;
    private javax.swing.JRadioButtonMenuItem beginner;
    private javax.swing.JPanel board;
    private javax.swing.JMenuItem exit;
    private javax.swing.JRadioButtonMenuItem expert;
    private javax.swing.JMenu game;
    private javax.swing.JMenu help;
    private javax.swing.JPanel holder;
    private javax.swing.JRadioButtonMenuItem intermediate;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem newGame;
    private javax.swing.JMenuItem newGame6X6;
    private javax.swing.JButton newGameBut;
    private javax.swing.JPanel options;
    private javax.swing.JButton pause;
    private javax.swing.JMenuItem resetGame;
    private javax.swing.JButton resetGameBut;
    private javax.swing.JButton resume;
    private javax.swing.JButton submit;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration
}
